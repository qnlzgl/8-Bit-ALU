/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module testcase_3 (
    input clk,
    input rst,
    input [4:0] io_button,
    output reg [7:0] aout,
    output reg [7:0] bout,
    output reg [7:0] out,
    output reg [5:0] alufn,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel
  );
  
  
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [5:0] opcode;
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_10 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [1-1:0] M_button_cond_out;
  reg [1-1:0] M_button_cond_in;
  button_conditioner_11 button_cond (
    .clk(clk),
    .in(M_button_cond_in),
    .out(M_button_cond_out)
  );
  localparam START_state = 5'd0;
  localparam ADD_state = 5'd1;
  localparam SUB_state = 5'd2;
  localparam MUL_state = 5'd3;
  localparam DIV_state = 5'd4;
  localparam AND_state = 5'd5;
  localparam OR_state = 5'd6;
  localparam XOR_state = 5'd7;
  localparam NAND_state = 5'd8;
  localparam NOR_state = 5'd9;
  localparam XNOR_state = 5'd10;
  localparam A_state = 5'd11;
  localparam B_state = 5'd12;
  localparam SHL_state = 5'd13;
  localparam SHR_state = 5'd14;
  localparam SRA_state = 5'd15;
  localparam CMPEQ_state = 5'd16;
  localparam CMPLE_state = 5'd17;
  localparam CMPLT_state = 5'd18;
  localparam PASS_state = 5'd19;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  wire [8-1:0] M_my_alu_out;
  wire [8-1:0] M_my_alu_io_seg;
  wire [4-1:0] M_my_alu_io_sel;
  alu_2 my_alu (
    .clk(clk),
    .rst(rst),
    .a(a),
    .b(b),
    .alufn(opcode),
    .out(M_my_alu_out),
    .io_seg(M_my_alu_io_seg),
    .io_sel(M_my_alu_io_sel)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_9 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    opcode = 1'h0;
    out = M_my_alu_out;
    alufn = opcode;
    M_button_cond_in = io_button[1+0-:1];
    M_edge_detector_in = M_button_cond_out;
    M_seg_values = 16'hffff;
    
    case (M_state_q)
      START_state: begin
        M_seg_values = 16'hd76e;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        a = 1'h0;
        b = 1'h0;
        if (M_edge_detector_out) begin
          M_state_d = ADD_state;
        end
      end
      ADD_state: begin
        opcode = 6'h00;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 6'h3e;
        b = 4'h8;
        if (M_my_alu_out == 7'h46 && M_edge_detector_out) begin
          M_state_d = SUB_state;
        end
      end
      SUB_state: begin
        opcode = 6'h01;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 6'h3e;
        b = 4'h8;
        if (M_my_alu_out == 6'h36 && M_edge_detector_out) begin
          M_state_d = MUL_state;
        end
      end
      MUL_state: begin
        opcode = 6'h03;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 3'h6;
        b = 4'h8;
        if (M_my_alu_out == 6'h30 && M_edge_detector_out) begin
          M_state_d = DIV_state;
        end
      end
      DIV_state: begin
        opcode = 6'h02;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 6'h30;
        b = 4'h8;
        if (M_my_alu_out == 3'h6 && M_edge_detector_out) begin
          M_state_d = AND_state;
        end
      end
      AND_state: begin
        opcode = 6'h18;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 3'h6;
        b = 4'h8;
        if (M_my_alu_out == 1'h0 && M_edge_detector_out) begin
          M_state_d = OR_state;
        end
      end
      OR_state: begin
        opcode = 6'h1e;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 3'h6;
        b = 4'h8;
        if (M_my_alu_out == 4'he && M_edge_detector_out) begin
          M_state_d = XOR_state;
        end
      end
      XOR_state: begin
        opcode = 6'h16;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 3'h6;
        b = 4'h8;
        if (M_my_alu_out == 4'he && M_edge_detector_out) begin
          M_state_d = NAND_state;
        end
      end
      NAND_state: begin
        opcode = 6'h17;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 4'hd;
        b = 5'h19;
        if (M_my_alu_out == 8'hf6 && M_edge_detector_out) begin
          M_state_d = NOR_state;
        end
      end
      NOR_state: begin
        opcode = 6'h11;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 3'h6;
        b = 4'h8;
        if (M_my_alu_out == 8'hf1 && M_edge_detector_out) begin
          M_state_d = XNOR_state;
        end
      end
      XNOR_state: begin
        opcode = 6'h19;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 3'h6;
        b = 4'h8;
        if (M_my_alu_out == 8'hf1 && M_edge_detector_out) begin
          M_state_d = A_state;
        end
      end
      A_state: begin
        opcode = 6'h1a;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 6'h2d;
        b = 5'h15;
        if (M_my_alu_out == 6'h2d && M_edge_detector_out) begin
          M_state_d = B_state;
        end
      end
      B_state: begin
        opcode = 6'h1c;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 6'h20;
        b = 6'h36;
        if (M_my_alu_out == 6'h36 && M_edge_detector_out) begin
          M_state_d = SHL_state;
        end
      end
      SHL_state: begin
        opcode = 6'h20;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 4'hf;
        b = 2'h2;
        if (M_my_alu_out == 6'h3c && M_edge_detector_out) begin
          M_state_d = SHR_state;
        end
      end
      SHR_state: begin
        opcode = 6'h21;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 7'h40;
        b = 2'h3;
        if (M_my_alu_out == 4'h8 && M_edge_detector_out) begin
          M_state_d = SRA_state;
        end
      end
      SRA_state: begin
        opcode = 6'h23;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 8'hc0;
        b = 3'h4;
        if (M_my_alu_out == 8'hfc && M_edge_detector_out) begin
          M_state_d = CMPEQ_state;
        end
      end
      CMPEQ_state: begin
        opcode = 6'h33;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 5'h1d;
        b = 4'h9;
        if (M_my_alu_out == 1'h0 && M_edge_detector_out) begin
          M_state_d = CMPLE_state;
        end
      end
      CMPLE_state: begin
        opcode = 6'h35;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 6'h3a;
        b = 6'h3a;
        if (M_my_alu_out == 1'h1 && M_edge_detector_out) begin
          M_state_d = CMPLT_state;
        end
      end
      CMPLT_state: begin
        opcode = 6'h37;
        alufn = opcode;
        io_seg = M_my_alu_io_seg;
        io_sel = M_my_alu_io_sel;
        a = 6'h22;
        b = 3'h6;
        if (M_my_alu_out == 1'h0 && M_edge_detector_out) begin
          M_state_d = PASS_state;
        end
      end
      PASS_state: begin
        M_seg_values = 16'h4088;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        a = 1'h0;
        b = 1'h0;
      end
      default: begin
        M_seg_values = 16'hffff;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        a = 1'h0;
        b = 1'h0;
      end
    endcase
    aout = a;
    bout = b;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
